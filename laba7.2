#include <iostream>
using namespace std;
//Задание №1
//Функция, принимаемая параметры
void first(string name = "Кирилл ", string fname = "Голубцов ", int age = 20)
{
cout << "Имя: " << name;
cout << "\nФамилия: " << fname;
cout << "\nВозраст: " << age << '\n' << '\n';
}
//Задание №2
//функция, принимаемая переменное количество параметров
void max(int n, ...)
{
//указатель на адрес первого параметра
int* p = &n;
//присвоение переменной значения, которое находится по следующему адресу
double max = *(p + 1);
//цикл для нахождения минимального элемента массива
for (; n != 0; n--) {
if (*(p + n) > max) max = *(p + n);
}
cout << "Максимальный элемент массива = " << max << "\n\n";
}
//Задание №3
//перегруженные метод для нахождения элемента массива, которое принимается в параметре
void search(int srch[]) {
int s = 0;
//массив элементов
int* arr = new int[100]; 
arr = srch;
for (int i = 0; i < 10; i++) {
if (arr[i] < 0) s++;
}
cout << "Количество отрицательных элементов в массиве = " << s << endl;
}
//перегруженные метод для нахождения элемента массива, которое принимается в параметре
void search(double srch[]) {
int s = 0;
//массив элементов
double* arr = new double[100];
arr = srch;
for (int i = 0; i < 10; i++) {
if (arr[i] < 0) s++;
}
cout << "Количество отрицательных элементов в массиве = " << s << endl;
}
//перегруженные метод для нахождения элемента массива, которое принимается в параметре
void search(char srch[]) {
int s = 0;
//массив элементов
char* arr = new char[100];
arr = srch;
for (int i = 0; i < 20; i++) {
if (arr[i] == '-') s++;
}
cout << "Количество отрицательных элементов в массиве = " << s << endl;
}
//Задание №4
//объявление нового типа данных
template <class T>
//шаблон функции, которое может принимает в параметр любой тип данных
T search(T srch[]) {
int s = 0;
//массив элементов
char* arr = new char[100];
arr = srch;
for (int i = 0; i < 100; i++) {
if (arr[i] < 0) s++;
}
cout << "Количество отрицательных элементов в массиве = " << s << endl;
}
//Задание №5
//функция, описывающая уравнение
double func(double x) {
return (3 * sin(sqrt(x)) + 0.35 * x - 3.8);
}
//функция, описывающая производную уравнения
double diff(double x) {
double h = 0.01;
return (func(x + h) - func(x - h)) / (2.0 * h);
}
//функция для вычисления корня уравнения методом Ньютона
double answer() {
double a = 2, b = 3, e = 0.0001, x[100];
int i = 0;
x[i] = 2 - func(2) / diff(2);
//цикл для нахождения корня с заданной точностью
while (a <= b or x[i + 1] - x[i] <= e) {
x[i + 1] = a - func(a) / diff(a);
a += 0.01;
}
return x[i];
}
int main() {
setlocale(LC_ALL, "ru");
cout << "Задание №1\n";
//Вызов функции с опущенными параметрами (по умолчанию)
first();
//вызов функции с заданными параметрами
first("Антон", "Антонов", 49);
//вызов функции с частично опущенными параметрами
first("Никита");
cout << "Задание №2\n";
//Вызов функции для нахождения максимального значения из всех параметров
max(6, 24, 75, -14, 488, 6, 3);
cout << "Задание №3\n";
int imas[] = { 2, 4, -5, 0, -23, -1, -8, 123, -2, 32 };
double dmas[] = { 24.3, -0.001, 0, 123.321, -2.4, 2.1, 0.0, -12.12, 3.5, -5.0 };
char cmas[] = { "Hello World -99" };
//условие с вызовом функции, принимаемой параметр int
search(imas);
//условие с вызовом функции, принимаемой параметр double
search(dmas);
//условие с вызовом функции, принимаемой параметр char
search(cmas);
cout << "Задание №4\n";
//условие с вызовом функции, принимаемой параметр любого значения
search(dmas);
cout << "Задание №5\n";
cout << "Точное значение = " << 2.2985 << '\n';
//вывод на экран результата функции, которая вычисляет корень уравнения методом Ньютона
cout << "Корень, найденый методом Ньютона = " << answer() << '\n';
//сравнение точного значения и найденного
cout << "Погрешность вычислений = " << abs(2.2985 - abs(answer())) << '\n';
system("pause");
}
